*js垃圾回收机制
  为什么需要垃圾回收机制？
    由于字符串／对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。js每次创建字符串数组或对象的时候，都必须
    动态分配内存。分配了就要释放，以便他们能够再用
  垃圾回收的方法：引用计数，标记清除

*前端安全问题和防护
  XSS攻击：恶意代码注入  防护：输入过滤输出转义
  CSRF攻击：跨站请求伪造 防护：加验证码用token进行验证
  界面劫持：在页面后面隐藏一些用户看不见的东西，做一些类似常规的页面
*前端项目优化
*react项目优化
*箭头函数和普通函数的区别
  箭头函数是匿名函数，不能构造函数，不能使用new
  箭头函数不绑定arguments,取而代之用rest参数解决
  箭头函数不绑定this,会捕获其所在上下文的this值，作为自己的this值
  箭头函数通过call或apply方法调用一个函数时，只传入了一个参数，对this并没有影响
  箭头函数没有原型属性
  箭头函数不能当作Generator函数，不能使用yield关键字
*渐进增强和优雅降级
  渐进增强：针对低版本浏览器进行最基本功能的开发，再针对高版本浏览器做一些功能效果的补充（政府网站，后台系统等重视功能的网站）
  优雅降级：针对高版本浏览器做，再针对低版本浏览器做兼容（比较注重效果）
*重排与重绘
*缓存
*设计模式
*三次握手和四次挥手
*盒子模型和box-sizing的用法
*闭包的原理和作用
*作用域链的原理
*AMD和CMD
*严格模式和标准模式

*跨域
  只要协议，域名，端口不同，则是为不同的域
  跨域的方法：
  1.服务端设置Access-Control-Allow-Origin响应头，浏览器允许跨域
  2.设置domain,只能用于不同子域之间的交互
  3.h5的postMessage
  4.window.name,使用同一个域之间的代理
  5.jsonp目前主流的跨域方法，调用其他域的脚本获取数据